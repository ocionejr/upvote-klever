// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: tweet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TweetServiceClient is the client API for TweetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TweetServiceClient interface {
	CreateTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*TweetResponse, error)
	FindTweetById(ctx context.Context, in *TweetId, opts ...grpc.CallOption) (*TweetResponse, error)
	ListTweets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TweetService_ListTweetsClient, error)
	UpdateTweet(ctx context.Context, in *UpdateTweetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tweetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTweetServiceClient(cc grpc.ClientConnInterface) TweetServiceClient {
	return &tweetServiceClient{cc}
}

func (c *tweetServiceClient) CreateTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*TweetResponse, error) {
	out := new(TweetResponse)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/CreateTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) FindTweetById(ctx context.Context, in *TweetId, opts ...grpc.CallOption) (*TweetResponse, error) {
	out := new(TweetResponse)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/FindTweetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) ListTweets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TweetService_ListTweetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TweetService_ServiceDesc.Streams[0], "/tweet.TweetService/ListTweets", opts...)
	if err != nil {
		return nil, err
	}
	x := &tweetServiceListTweetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TweetService_ListTweetsClient interface {
	Recv() (*TweetResponse, error)
	grpc.ClientStream
}

type tweetServiceListTweetsClient struct {
	grpc.ClientStream
}

func (x *tweetServiceListTweetsClient) Recv() (*TweetResponse, error) {
	m := new(TweetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tweetServiceClient) UpdateTweet(ctx context.Context, in *UpdateTweetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/UpdateTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TweetServiceServer is the server API for TweetService service.
// All implementations must embed UnimplementedTweetServiceServer
// for forward compatibility
type TweetServiceServer interface {
	CreateTweet(context.Context, *TweetRequest) (*TweetResponse, error)
	FindTweetById(context.Context, *TweetId) (*TweetResponse, error)
	ListTweets(*emptypb.Empty, TweetService_ListTweetsServer) error
	UpdateTweet(context.Context, *UpdateTweetRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTweetServiceServer()
}

// UnimplementedTweetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTweetServiceServer struct {
}

func (UnimplementedTweetServiceServer) CreateTweet(context.Context, *TweetRequest) (*TweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTweet not implemented")
}
func (UnimplementedTweetServiceServer) FindTweetById(context.Context, *TweetId) (*TweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTweetById not implemented")
}
func (UnimplementedTweetServiceServer) ListTweets(*emptypb.Empty, TweetService_ListTweetsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTweets not implemented")
}
func (UnimplementedTweetServiceServer) UpdateTweet(context.Context, *UpdateTweetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTweet not implemented")
}
func (UnimplementedTweetServiceServer) mustEmbedUnimplementedTweetServiceServer() {}

// UnsafeTweetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TweetServiceServer will
// result in compilation errors.
type UnsafeTweetServiceServer interface {
	mustEmbedUnimplementedTweetServiceServer()
}

func RegisterTweetServiceServer(s grpc.ServiceRegistrar, srv TweetServiceServer) {
	s.RegisterService(&TweetService_ServiceDesc, srv)
}

func _TweetService_CreateTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).CreateTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/CreateTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).CreateTweet(ctx, req.(*TweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_FindTweetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).FindTweetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/FindTweetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).FindTweetById(ctx, req.(*TweetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_ListTweets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TweetServiceServer).ListTweets(m, &tweetServiceListTweetsServer{stream})
}

type TweetService_ListTweetsServer interface {
	Send(*TweetResponse) error
	grpc.ServerStream
}

type tweetServiceListTweetsServer struct {
	grpc.ServerStream
}

func (x *tweetServiceListTweetsServer) Send(m *TweetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TweetService_UpdateTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).UpdateTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/UpdateTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).UpdateTweet(ctx, req.(*UpdateTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TweetService_ServiceDesc is the grpc.ServiceDesc for TweetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TweetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tweet.TweetService",
	HandlerType: (*TweetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTweet",
			Handler:    _TweetService_CreateTweet_Handler,
		},
		{
			MethodName: "FindTweetById",
			Handler:    _TweetService_FindTweetById_Handler,
		},
		{
			MethodName: "UpdateTweet",
			Handler:    _TweetService_UpdateTweet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTweets",
			Handler:       _TweetService_ListTweets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tweet.proto",
}
