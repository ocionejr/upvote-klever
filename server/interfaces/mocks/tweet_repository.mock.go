// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ocionejr/upvote-klever/server/interfaces (interfaces: TweetRepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ocionejr/upvote-klever/server/models"
)

// MockTweetRepositoryInterface is a mock of TweetRepositoryInterface interface.
type MockTweetRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTweetRepositoryInterfaceMockRecorder
}

// MockTweetRepositoryInterfaceMockRecorder is the mock recorder for MockTweetRepositoryInterface.
type MockTweetRepositoryInterfaceMockRecorder struct {
	mock *MockTweetRepositoryInterface
}

// NewMockTweetRepositoryInterface creates a new mock instance.
func NewMockTweetRepositoryInterface(ctrl *gomock.Controller) *MockTweetRepositoryInterface {
	mock := &MockTweetRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTweetRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTweetRepositoryInterface) EXPECT() *MockTweetRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddUpvote mocks base method.
func (m *MockTweetRepositoryInterface) AddUpvote(arg0 context.Context, arg1 *models.Tweet, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUpvote", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUpvote indicates an expected call of AddUpvote.
func (mr *MockTweetRepositoryInterfaceMockRecorder) AddUpvote(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUpvote", reflect.TypeOf((*MockTweetRepositoryInterface)(nil).AddUpvote), arg0, arg1, arg2)
}

// DeleteTweet mocks base method.
func (m *MockTweetRepositoryInterface) DeleteTweet(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTweet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTweet indicates an expected call of DeleteTweet.
func (mr *MockTweetRepositoryInterfaceMockRecorder) DeleteTweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTweet", reflect.TypeOf((*MockTweetRepositoryInterface)(nil).DeleteTweet), arg0, arg1)
}

// FindById mocks base method.
func (m *MockTweetRepositoryInterface) FindById(arg0 context.Context, arg1 string) (*models.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(*models.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTweetRepositoryInterfaceMockRecorder) FindById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTweetRepositoryInterface)(nil).FindById), arg0, arg1)
}

// InsertTweet mocks base method.
func (m *MockTweetRepositoryInterface) InsertTweet(arg0 context.Context, arg1 *models.Tweet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTweet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTweet indicates an expected call of InsertTweet.
func (mr *MockTweetRepositoryInterfaceMockRecorder) InsertTweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTweet", reflect.TypeOf((*MockTweetRepositoryInterface)(nil).InsertTweet), arg0, arg1)
}

// ListAll mocks base method.
func (m *MockTweetRepositoryInterface) ListAll() ([]models.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll")
	ret0, _ := ret[0].([]models.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockTweetRepositoryInterfaceMockRecorder) ListAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockTweetRepositoryInterface)(nil).ListAll))
}

// RemoveUpvote mocks base method.
func (m *MockTweetRepositoryInterface) RemoveUpvote(arg0 context.Context, arg1 *models.Tweet, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUpvote", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUpvote indicates an expected call of RemoveUpvote.
func (mr *MockTweetRepositoryInterfaceMockRecorder) RemoveUpvote(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUpvote", reflect.TypeOf((*MockTweetRepositoryInterface)(nil).RemoveUpvote), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockTweetRepositoryInterface) Update(arg0 context.Context, arg1 *models.Tweet, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTweetRepositoryInterfaceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTweetRepositoryInterface)(nil).Update), arg0, arg1, arg2)
}
