// Code generated by MockGen. DO NOT EDIT.
// Source: server/interfaces/tweet_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ocionejr/upvote-klever/server/models"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockTweetRepositoryInterface is a mock of TweetRepositoryInterface interface.
type MockTweetRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTweetRepositoryInterfaceMockRecorder
}

// MockTweetRepositoryInterfaceMockRecorder is the mock recorder for MockTweetRepositoryInterface.
type MockTweetRepositoryInterfaceMockRecorder struct {
	mock *MockTweetRepositoryInterface
}

// NewMockTweetRepositoryInterface creates a new mock instance.
func NewMockTweetRepositoryInterface(ctrl *gomock.Controller) *MockTweetRepositoryInterface {
	mock := &MockTweetRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTweetRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTweetRepositoryInterface) EXPECT() *MockTweetRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddUpvote mocks base method.
func (m *MockTweetRepositoryInterface) AddUpvote(ctx context.Context, tweet *models.Tweet, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUpvote", ctx, tweet, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUpvote indicates an expected call of AddUpvote.
func (mr *MockTweetRepositoryInterfaceMockRecorder) AddUpvote(ctx, tweet, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUpvote", reflect.TypeOf((*MockTweetRepositoryInterface)(nil).AddUpvote), ctx, tweet, userId)
}

// DeleteTweet mocks base method.
func (m *MockTweetRepositoryInterface) DeleteTweet(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTweet", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTweet indicates an expected call of DeleteTweet.
func (mr *MockTweetRepositoryInterfaceMockRecorder) DeleteTweet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTweet", reflect.TypeOf((*MockTweetRepositoryInterface)(nil).DeleteTweet), ctx, id)
}

// FindById mocks base method.
func (m *MockTweetRepositoryInterface) FindById(ctx context.Context, id string) (*models.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*models.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTweetRepositoryInterfaceMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTweetRepositoryInterface)(nil).FindById), ctx, id)
}

// InsertTweet mocks base method.
func (m *MockTweetRepositoryInterface) InsertTweet(ctx context.Context, tweet *models.Tweet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTweet", ctx, tweet)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTweet indicates an expected call of InsertTweet.
func (mr *MockTweetRepositoryInterfaceMockRecorder) InsertTweet(ctx, tweet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTweet", reflect.TypeOf((*MockTweetRepositoryInterface)(nil).InsertTweet), ctx, tweet)
}

// ListAll mocks base method.
func (m *MockTweetRepositoryInterface) ListAll() (*mongo.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll")
	ret0, _ := ret[0].(*mongo.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockTweetRepositoryInterfaceMockRecorder) ListAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockTweetRepositoryInterface)(nil).ListAll))
}

// RemoveUpvote mocks base method.
func (m *MockTweetRepositoryInterface) RemoveUpvote(ctx context.Context, tweet *models.Tweet, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUpvote", ctx, tweet, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUpvote indicates an expected call of RemoveUpvote.
func (mr *MockTweetRepositoryInterfaceMockRecorder) RemoveUpvote(ctx, tweet, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUpvote", reflect.TypeOf((*MockTweetRepositoryInterface)(nil).RemoveUpvote), ctx, tweet, userId)
}

// Update mocks base method.
func (m *MockTweetRepositoryInterface) Update(ctx context.Context, tweet *models.Tweet, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tweet, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTweetRepositoryInterfaceMockRecorder) Update(ctx, tweet, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTweetRepositoryInterface)(nil).Update), ctx, tweet, id)
}
